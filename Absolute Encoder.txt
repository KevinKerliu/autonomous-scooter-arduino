-CS (Chip Select) pin: on the Absolute Encoder chip, it is an input pin. A minimum of a 500 ns pulse outputted by Arduino is required to enable the chip.
-CLK (Clock) pin: on the Absolute Encoder chip, it is an input pin. Chip must be enabled. Takes in pulses from the Arduino.
-DO (Digital output) pin: on the Absolute Encoder chip, it is an output pin. Sends 1 bit of data everytime a rising edge of a pulse is inputted into the CLK pin.
	-First ten bits (D0 to D9 on the datasheet) provides the absolute angular position data, last six bits are status bits that we don't need to use.
	-To read the angle, first output a pulse into the CS pin using digitalWrite. By continuously sending pulses into the CLK pin, read bits coming into the input pin on Arduino.
	  Store the bits one by one into an integer type variable, bit shift left each time you store, until the 10th bit. After the first 10 bits, continue to send pulses into CLK to go through
	  the next 6 bits. Print out the integer type variable. Repeat.


Ribbon wires: Green - digital input, White - Clock, Purple -Digital Output, Red - VCC, Black - GND, Yellow - Chip Select
Ribbon wires are connected to the wires of the connection to the encoder. Color code is NOT for connection wires, only for ribbon wires!

Arduino code (from https://github.com/heavydetail/EMS22A_Arduino/blob/master/EMS22A_Reading/EMS22A_Reading.ino):
const int PIN_CS = 5;  //chip select
const int PIN_CLOCK = 6;  //clock
const int PIN_DATA = 7;  //digital output from encoder

void setup() {
  Serial.begin(115200);
  pinMode(PIN_CS, OUTPUT);
  pinMode(PIN_CLOCK, OUTPUT);
  pinMode(PIN_DATA, INPUT);

  digitalWrite(PIN_CLOCK, HIGH);
  digitalWrite(PIN_CS, LOW);
}


//byte stream[16];
void loop() {

  digitalWrite(PIN_CS, HIGH);
  digitalWrite(PIN_CS, LOW);
  int pos = 0;
  for (int i=0; i<10; i++) {
    digitalWrite(PIN_CLOCK, LOW);
    delay(0.1);
    digitalWrite(PIN_CLOCK, HIGH);
    delay(0.1)

    pos= pos | digitalRead(PIN_DATA);

    if(i<9) pos = pos << 1;
  }
  for (int i=0; i<6; i++) {
    digitalWrite(PIN_CLOCK, LOW);
    digitalWrite(PIN_CLOCK, HIGH);
  }
  digitalWrite(PIN_CLOCK, LOW);
  digitalWrite(PIN_CLOCK, HIGH);
  Serial.println(pos);
}